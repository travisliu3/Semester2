/*
*****************************************************************************
						OOP244-Workshop-7
Full Name  : Travis Liu
e-mail     : tliu84@myseneca.ca
Student ID#: 156740201
Date       : 14 July, 2022
Section    : ZCC

I have done all the coding by myself and only copied the code that my
professor provided to complete my workshops and assignments.
*****************************************************************************
*/
I learnt the following concepts in this workshop:

1.Inherit a derived class from a base class
eg-class Minister : public MemberParliament
{
		char primename[PRIME_MINISTER_NAME + 1];
		double powyear;
.
.
.
}
In the above example, I inhereted MemberParliament publicaly to class Minister
by using : and mentioning the inherited class on the right side.


2.Shadow a base class member function with a derived class member function
eg-istream& operator>>(istream& in, Minister& member)
	{
		member.read(in);
		return in;
	}
In the above example, I used the read function in Minister class because the read
function in MemberParliament class is shadowed by the Minister class. So, unless
mentioned, the program will use the Minister class's read function.


3.Access a shadowed member function that is defined in a base class
eg-ostream& Minister::write(ostream& os)
	{
		MemberParliament::write(os);
		cout << " | " << primename << "/" << powyear;
		return os;
	}
In the above example, I used :: to reference the shadowed write function in
MemberParliament and not the write function in Minister class.


4.Utilize custom input/output operators with these classes
eg-istream& operator>>(istream& in, Minister& member)
	{
		member.read(in);
		return in;
	}
In the above example, I defined a custom input operator which reads from the Minister class
and also the base class which is MemberParliament.